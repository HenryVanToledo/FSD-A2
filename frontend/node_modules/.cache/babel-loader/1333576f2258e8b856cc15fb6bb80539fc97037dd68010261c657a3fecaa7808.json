{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Business\\\\Wabi\\\\FSD-A2\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { UserContext } from \"./UserContext\";\n\n// Create CartContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\n\n// CartContext Provider component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState(null);\n  const {\n    user\n  } = useContext(UserContext);\n  useEffect(() => {\n    if (user) {\n      fetchCart();\n    }\n  }, [user]);\n\n  // Fetch the cart data from the backend\n  const fetchCart = async () => {\n    if (!user) {\n      return;\n    }\n    try {\n      const userId = user.userId;\n      const cartId = userId;\n      const response = await axios.get(`http://localhost:4000/api/cart/${cartId}`);\n      setCart(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n    }\n  };\n\n  // Add product to cart\n  const addToCart = async (productId, quantity) => {\n    if (!user) {\n      return;\n    }\n    try {\n      const userId = user.userId;\n      await axios.post(\"http://localhost:4000/api/cart/add\", {\n        userId,\n        productId,\n        quantity\n      });\n      // Refetch the cart after adding the product\n      fetchCart();\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n    }\n  };\n\n  // Update product quantity in cart\n  const updateCartItem = async (cartLineId, quantity) => {\n    try {\n      await axios.put(\"http://localhost:4000/api/cart/update\", {\n        cartLineId,\n        quantity\n      });\n      // Refetch the cart after updating the quantity\n      fetchCart();\n    } catch (error) {\n      console.error(\"Error updating cart item:\", error);\n    }\n  };\n\n  // Increase product quantity in cart\n  const increaseQuantity = async productId => {\n    const cartLine = cart.cartLines.find(line => line.productId === productId);\n    if (cartLine) {\n      updateCartItem(cartLine.cartLineId, cartLine.quantity + 1);\n    } else {\n      console.error(\"Cart line not found\");\n    }\n  };\n\n  // Decrease product quantity in cart\n  const decreaseQuantity = async productId => {\n    const cartLine = cart.cartLines.find(line => line.productId === productId);\n    if (cartLine && cartLine.quantity > 1) {\n      updateCartItem(cartLine.cartLineId, cartLine.quantity - 1);\n    } else {\n      removeFromCart(cartLine.cartLineId);\n    }\n  };\n\n  // Remove product from cart\n  const removeFromCart = async cartLineId => {\n    try {\n      await axios.delete(`http://localhost:4000/api/cart/remove/${cartLineId}`);\n      // Refetch the cart after removing the product\n      fetchCart();\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n    }\n  };\n  const clearCart = async () => {\n    if (!cart) {\n      console.error(\"No cart found for the user\");\n      return;\n    }\n    const cartId = user.userId;\n    console.log('Cart ID to clear:', cartId);\n    try {\n      await axios.delete(`http://localhost:4000/api/cart/clear/${cartId}`);\n      // Refetch the cart after clearing the cart\n      fetchCart();\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n    }\n  };\n\n  // Return the provider component\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      fetchCart,\n      addToCart,\n      removeFromCart,\n      increaseQuantity,\n      decreaseQuantity,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"bdZEYOAIa04DjttN/A1rccSROpc=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","axios","UserContext","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","user","fetchCart","userId","cartId","response","get","data","error","console","addToCart","productId","quantity","post","updateCartItem","cartLineId","put","increaseQuantity","cartLine","cartLines","find","line","decreaseQuantity","removeFromCart","delete","clearCart","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/Business/Wabi/FSD-A2/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { UserContext } from \"./UserContext\";\r\n\r\n// Create CartContext\r\nexport const CartContext = createContext();\r\n\r\n// CartContext Provider component\r\nexport const CartProvider = ({ children }) => {\r\n  const [cart, setCart] = useState(null);\r\n  const { user } = useContext(UserContext);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchCart();\r\n    }\r\n  }, [user]);\r\n\r\n  // Fetch the cart data from the backend\r\n  const fetchCart = async () => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n    try {\r\n      const userId = user.userId;\r\n      const cartId = userId;\r\n      const response = await axios.get(\r\n        `http://localhost:4000/api/cart/${cartId}`\r\n      );\r\n      setCart(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching cart:\", error);\r\n    }\r\n  };\r\n\r\n  // Add product to cart\r\n  const addToCart = async (productId, quantity) => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n    try {\r\n      const userId = user.userId;\r\n      await axios.post(\"http://localhost:4000/api/cart/add\", {\r\n        userId,\r\n        productId,\r\n        quantity,\r\n      });\r\n      // Refetch the cart after adding the product\r\n      fetchCart();\r\n    } catch (error) {\r\n      console.error(\"Error adding to cart:\", error);\r\n    }\r\n  };\r\n\r\n  // Update product quantity in cart\r\n  const updateCartItem = async (cartLineId, quantity) => {\r\n    try {\r\n      await axios.put(\"http://localhost:4000/api/cart/update\", {\r\n        cartLineId,\r\n        quantity,\r\n      });\r\n      // Refetch the cart after updating the quantity\r\n      fetchCart();\r\n    } catch (error) {\r\n      console.error(\"Error updating cart item:\", error);\r\n    }\r\n  };\r\n\r\n  // Increase product quantity in cart\r\n  const increaseQuantity = async (productId) => {\r\n    const cartLine = cart.cartLines.find(\r\n      (line) => line.productId === productId\r\n    );\r\n    if (cartLine) {\r\n      updateCartItem(cartLine.cartLineId, cartLine.quantity + 1);\r\n    } else {\r\n      console.error(\"Cart line not found\");\r\n    }\r\n  };\r\n\r\n  // Decrease product quantity in cart\r\n  const decreaseQuantity = async (productId) => {\r\n    const cartLine = cart.cartLines.find(\r\n      (line) => line.productId === productId\r\n    );\r\n    if (cartLine && cartLine.quantity > 1) {\r\n      updateCartItem(cartLine.cartLineId, cartLine.quantity - 1);\r\n    } else {\r\n      removeFromCart(cartLine.cartLineId);\r\n    }\r\n  };\r\n\r\n  // Remove product from cart\r\n  const removeFromCart = async (cartLineId) => {\r\n    try {\r\n      await axios.delete(`http://localhost:4000/api/cart/remove/${cartLineId}`);\r\n      // Refetch the cart after removing the product\r\n      fetchCart();\r\n    } catch (error) {\r\n      console.error(\"Error removing from cart:\", error);\r\n    }\r\n  };\r\n\r\n  const clearCart = async () => {\r\n    if (!cart) {\r\n      console.error(\"No cart found for the user\");\r\n      return;\r\n    }\r\n    const cartId = user.userId;\r\n    console.log('Cart ID to clear:', cartId);\r\n    try {\r\n      await axios.delete(`http://localhost:4000/api/cart/clear/${cartId}`);\r\n      // Refetch the cart after clearing the cart\r\n      fetchCart();\r\n    } catch (error) {\r\n      console.error(\"Error clearing cart:\", error);\r\n    }\r\n  };\r\n\r\n  // Return the provider component\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cart,\r\n        fetchCart,\r\n        addToCart,\r\n        removeFromCart,\r\n        increaseQuantity,\r\n        decreaseQuantity,\r\n        clearCart\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}