{"ast":null,"code":"export default function validate(values) {\n  let errors = {};\n\n  // Load users from localStorage\n  const storedUsers = JSON.parse(localStorage.getItem('users')) || [];\n\n  // Check for name validity\n  if (!values.name) {\n    errors.name = 'Name is required';\n  } else if (values.name.length < 3) {\n    errors.name = 'Name must be 3 or more characters';\n  } else if (!/^[a-zA-Z\\s]*$/.test(values.name)) {\n    errors.name = 'Name must contain only letters and spaces';\n  }\n\n  // Check for email validity\n  if (!values.email) {\n    errors.email = 'Email address is required';\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = 'Email address is invalid';\n  }\n\n  // Check for duplicate email\n  const isEmailDuplicate = storedUsers.some(user => user.email === values.email && user.id !== values.id // Exclude the current user if editing\n  );\n  if (isEmailDuplicate) {\n    errors.email = 'Email address is already in use';\n  }\n\n  // Check for password validity\n  if (values.password && values.password.length < 8) {\n    errors.password = 'Password must be 8 or more characters';\n  } else if (values.password && !/(?=.*[0-9])/.test(values.password)) {\n    errors.password = 'Password must contain a number';\n  } else if (values.password && !/(?=.*[A-Z])/.test(values.password)) {\n    errors.password = 'Password must contain an uppercase letter';\n  } else if (values.password && !/(?=.*[!@#$%^&*])/.test(values.password)) {\n    errors.password = 'Password must contain a special character';\n  }\n  if (values.confirmPassword && values.confirmPassword !== values.password) {\n    errors.confirmPassword = 'Passwords do not match';\n  }\n  return errors;\n}","map":{"version":3,"names":["validate","values","errors","storedUsers","JSON","parse","localStorage","getItem","name","length","test","email","isEmailDuplicate","some","user","id","password","confirmPassword"],"sources":["/Users/isaackelsallnew/Documents/GitHub/FSD-A2/frontend/src/components/signupFormValidation.js"],"sourcesContent":["export default function validate(values) {\n    let errors = {};\n  \n    // Load users from localStorage\n    const storedUsers = JSON.parse(localStorage.getItem('users')) || [];\n  \n    // Check for name validity\n    if (!values.name) {\n      errors.name = 'Name is required';\n    } else if (values.name.length < 3) {\n      errors.name = 'Name must be 3 or more characters';\n    } else if (!/^[a-zA-Z\\s]*$/.test(values.name)) {\n      errors.name = 'Name must contain only letters and spaces';\n    }\n  \n    // Check for email validity\n    if (!values.email) {\n      errors.email = 'Email address is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n      errors.email = 'Email address is invalid';\n    }\n  \n    // Check for duplicate email\n    const isEmailDuplicate = storedUsers.some(\n      (user) => user.email === values.email && user.id !== values.id // Exclude the current user if editing\n    );\n  \n    if (isEmailDuplicate) {\n      errors.email = 'Email address is already in use';\n    }\n  \n    // Check for password validity\n    if (values.password && values.password.length < 8) {\n      errors.password = 'Password must be 8 or more characters';\n    } else if (values.password && !/(?=.*[0-9])/.test(values.password)) {\n      errors.password = 'Password must contain a number';\n    } else if (values.password && !/(?=.*[A-Z])/.test(values.password)) {\n      errors.password = 'Password must contain an uppercase letter';\n    } else if (values.password && !/(?=.*[!@#$%^&*])/.test(values.password)) {\n      errors.password = 'Password must contain a special character';\n    }\n  \n    if (values.confirmPassword && values.confirmPassword !== values.password) {\n      errors.confirmPassword = 'Passwords do not match';\n    }\n  \n    return errors;\n  }\n  "],"mappings":"AAAA,eAAe,SAASA,QAAQA,CAACC,MAAM,EAAE;EACrC,IAAIC,MAAM,GAAG,CAAC,CAAC;;EAEf;EACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;;EAEnE;EACA,IAAI,CAACN,MAAM,CAACO,IAAI,EAAE;IAChBN,MAAM,CAACM,IAAI,GAAG,kBAAkB;EAClC,CAAC,MAAM,IAAIP,MAAM,CAACO,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;IACjCP,MAAM,CAACM,IAAI,GAAG,mCAAmC;EACnD,CAAC,MAAM,IAAI,CAAC,eAAe,CAACE,IAAI,CAACT,MAAM,CAACO,IAAI,CAAC,EAAE;IAC7CN,MAAM,CAACM,IAAI,GAAG,2CAA2C;EAC3D;;EAEA;EACA,IAAI,CAACP,MAAM,CAACU,KAAK,EAAE;IACjBT,MAAM,CAACS,KAAK,GAAG,2BAA2B;EAC5C,CAAC,MAAM,IAAI,CAAC,cAAc,CAACD,IAAI,CAACT,MAAM,CAACU,KAAK,CAAC,EAAE;IAC7CT,MAAM,CAACS,KAAK,GAAG,0BAA0B;EAC3C;;EAEA;EACA,MAAMC,gBAAgB,GAAGT,WAAW,CAACU,IAAI,CACtCC,IAAI,IAAKA,IAAI,CAACH,KAAK,KAAKV,MAAM,CAACU,KAAK,IAAIG,IAAI,CAACC,EAAE,KAAKd,MAAM,CAACc,EAAE,CAAC;EACjE,CAAC;EAED,IAAIH,gBAAgB,EAAE;IACpBV,MAAM,CAACS,KAAK,GAAG,iCAAiC;EAClD;;EAEA;EACA,IAAIV,MAAM,CAACe,QAAQ,IAAIf,MAAM,CAACe,QAAQ,CAACP,MAAM,GAAG,CAAC,EAAE;IACjDP,MAAM,CAACc,QAAQ,GAAG,uCAAuC;EAC3D,CAAC,MAAM,IAAIf,MAAM,CAACe,QAAQ,IAAI,CAAC,aAAa,CAACN,IAAI,CAACT,MAAM,CAACe,QAAQ,CAAC,EAAE;IAClEd,MAAM,CAACc,QAAQ,GAAG,gCAAgC;EACpD,CAAC,MAAM,IAAIf,MAAM,CAACe,QAAQ,IAAI,CAAC,aAAa,CAACN,IAAI,CAACT,MAAM,CAACe,QAAQ,CAAC,EAAE;IAClEd,MAAM,CAACc,QAAQ,GAAG,2CAA2C;EAC/D,CAAC,MAAM,IAAIf,MAAM,CAACe,QAAQ,IAAI,CAAC,kBAAkB,CAACN,IAAI,CAACT,MAAM,CAACe,QAAQ,CAAC,EAAE;IACvEd,MAAM,CAACc,QAAQ,GAAG,2CAA2C;EAC/D;EAEA,IAAIf,MAAM,CAACgB,eAAe,IAAIhB,MAAM,CAACgB,eAAe,KAAKhB,MAAM,CAACe,QAAQ,EAAE;IACxEd,MAAM,CAACe,eAAe,GAAG,wBAAwB;EACnD;EAEA,OAAOf,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}