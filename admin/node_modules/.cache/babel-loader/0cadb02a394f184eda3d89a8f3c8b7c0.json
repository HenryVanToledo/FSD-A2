{"ast":null,"code":"// import React, { useState, useContext, useEffect } from \"react\";\n// import gql from \"graphql-tag\";\n// import MessageContext from \"../contexts/AdminContext.js\";\n// import { getComments, createComment } from \"../data/repository.js\";\n// import client from \"../apollo/client.js\";\n// export default function Comments() {\n//   const [comment, setComment] = useState(\"\");\n//   const [errorMessage, setErrorMessage] = useState(null);\n//   const [comments, setComments] = useState([]);\n//   const { setMessage } = useContext(MessageContext);\n//   // Load comments.\n//   useEffect(() => {\n//     async function loadComments() {\n//       const currentComments = await getComments();\n//       setComments(currentComments);\n//     }\n//     loadComments();\n//   }, []);\n//   // Setup subscription.\n//   useEffect(() => {\n//     // Subscripe to the GraphQL comment_added subscription.\n//     const subscription = client.subscribe({\n//       query: gql`\n//         subscription {\n//           comment_added {\n//             id,\n//             content\n//           }\n//         }`\n//     }).subscribe({\n//       next: (payload) => {\n//         const newComment = payload.data.comment_added;\n//         // Ignore the new comment if it already exists.\n//         for(const x of comments) {\n//           if(newComment.id === x.id)\n//             return;\n//         }\n//         // Add new comment.\n//         setComments([...comments, newComment]);\n//         // Set message.\n//         setMessage(<>Comment with <strong>ID {newComment.id}</strong> created.</>);\n//       }\n//     });\n//     // Unsubscripe from the subscription when the effect unmounts.\n//     return () => {\n//       subscription.unsubscribe();\n//     };\n//   }, [comments, setMessage]);\n//   const handleInputChange = (event) => {\n//     setComment(event.target.value);\n//   };\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     // Trim the comment text.\n//     const commentTrimmed = comment.trim();\n//     if(commentTrimmed === \"\") {\n//       setErrorMessage(\"A comment cannot be empty.\");\n//       return;\n//     }\n//     // Create comment.\n//     const newComment = await createComment(commentTrimmed);\n//     // Update comments.\n//     setComments([...comments, newComment]);\n//     // Set message.\n//     setMessage(<>Comment with <strong>ID {newComment.id}</strong> created.</>);\n//     // Reset comment content.\n//     setComment(\"\");\n//     setErrorMessage(\"\");\n//   };\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <fieldset>\n//           <legend>New Comment</legend>\n//           <div className=\"form-group\">\n//             <textarea name=\"comment\" id=\"comment\" className=\"form-control\" rows=\"3\"\n//               value={comment} onChange={handleInputChange} />\n//           </div>\n//           {errorMessage !== null &&\n//             <div className=\"form-group\">\n//               <span className=\"text-danger\">{errorMessage}</span>\n//             </div>\n//           }\n//           <div className=\"form-group\">\n//             <input type=\"button\" className=\"btn btn-danger mr-5\" value=\"Cancel\"\n//               onClick={() => { setComment(\"\"); setErrorMessage(null); }} />\n//             <input type=\"submit\" className=\"btn btn-primary\" value=\"Comment\" />\n//           </div>\n//         </fieldset>\n//       </form>\n//       <hr />\n//       <h1>Comments</h1>\n//       <div>\n//         {comments.length === 0 ?\n//           <span className=\"text-muted\">No comments have been submitted.</span>\n//           :\n//           comments.map((x) =>\n//             <div key={x.id} className=\"border my-3 p-3\" style={{ whiteSpace: \"pre-wrap\" }}>{x.content}</div>\n//           )\n//         }\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/xampp/htdocs/Business/Wabi/FSD-A2/admin/src/pages/products.js"],"sourcesContent":["// import React, { useState, useContext, useEffect } from \"react\";\r\n// import gql from \"graphql-tag\";\r\n// import MessageContext from \"../contexts/AdminContext.js\";\r\n// import { getComments, createComment } from \"../data/repository.js\";\r\n// import client from \"../apollo/client.js\";\r\n\r\n// export default function Comments() {\r\n//   const [comment, setComment] = useState(\"\");\r\n//   const [errorMessage, setErrorMessage] = useState(null);\r\n//   const [comments, setComments] = useState([]);\r\n//   const { setMessage } = useContext(MessageContext);\r\n\r\n//   // Load comments.\r\n//   useEffect(() => {\r\n//     async function loadComments() {\r\n//       const currentComments = await getComments();\r\n\r\n//       setComments(currentComments);\r\n//     }\r\n//     loadComments();\r\n//   }, []);\r\n\r\n//   // Setup subscription.\r\n//   useEffect(() => {\r\n//     // Subscripe to the GraphQL comment_added subscription.\r\n//     const subscription = client.subscribe({\r\n//       query: gql`\r\n//         subscription {\r\n//           comment_added {\r\n//             id,\r\n//             content\r\n//           }\r\n//         }`\r\n//     }).subscribe({\r\n//       next: (payload) => {\r\n//         const newComment = payload.data.comment_added;\r\n\r\n//         // Ignore the new comment if it already exists.\r\n//         for(const x of comments) {\r\n//           if(newComment.id === x.id)\r\n//             return;\r\n//         }\r\n\r\n//         // Add new comment.\r\n//         setComments([...comments, newComment]);\r\n\r\n//         // Set message.\r\n//         setMessage(<>Comment with <strong>ID {newComment.id}</strong> created.</>);\r\n//       }\r\n//     });\r\n\r\n//     // Unsubscripe from the subscription when the effect unmounts.\r\n//     return () => {\r\n//       subscription.unsubscribe();\r\n//     };\r\n//   }, [comments, setMessage]);\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setComment(event.target.value);\r\n//   };\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     // Trim the comment text.\r\n//     const commentTrimmed = comment.trim();\r\n\r\n//     if(commentTrimmed === \"\") {\r\n//       setErrorMessage(\"A comment cannot be empty.\");\r\n//       return;\r\n//     }\r\n\r\n//     // Create comment.\r\n//     const newComment = await createComment(commentTrimmed);\r\n\r\n//     // Update comments.\r\n//     setComments([...comments, newComment]);\r\n\r\n//     // Set message.\r\n//     setMessage(<>Comment with <strong>ID {newComment.id}</strong> created.</>);\r\n\r\n//     // Reset comment content.\r\n//     setComment(\"\");\r\n//     setErrorMessage(\"\");\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <fieldset>\r\n//           <legend>New Comment</legend>\r\n//           <div className=\"form-group\">\r\n//             <textarea name=\"comment\" id=\"comment\" className=\"form-control\" rows=\"3\"\r\n//               value={comment} onChange={handleInputChange} />\r\n//           </div>\r\n//           {errorMessage !== null &&\r\n//             <div className=\"form-group\">\r\n//               <span className=\"text-danger\">{errorMessage}</span>\r\n//             </div>\r\n//           }\r\n//           <div className=\"form-group\">\r\n//             <input type=\"button\" className=\"btn btn-danger mr-5\" value=\"Cancel\"\r\n//               onClick={() => { setComment(\"\"); setErrorMessage(null); }} />\r\n//             <input type=\"submit\" className=\"btn btn-primary\" value=\"Comment\" />\r\n//           </div>\r\n//         </fieldset>\r\n//       </form>\r\n\r\n//       <hr />\r\n//       <h1>Comments</h1>\r\n//       <div>\r\n//         {comments.length === 0 ?\r\n//           <span className=\"text-muted\">No comments have been submitted.</span>\r\n//           :\r\n//           comments.map((x) =>\r\n//             <div key={x.id} className=\"border my-3 p-3\" style={{ whiteSpace: \"pre-wrap\" }}>{x.content}</div>\r\n//           )\r\n//         }\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings},"metadata":{},"sourceType":"module"}